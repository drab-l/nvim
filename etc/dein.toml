[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = '''
lua << EOF
-- Mappings.

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
-- vim.keymap.set('n', '<Leader>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<Leader>q', vim.diagnostic.setloclist, opts)

-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    -- vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }

    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
    -- vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
    vim.keymap.set('n', '<Leader>k', vim.lsp.buf.hover, bufopts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
    -- vim.keymap.set('n', '<Leader>k', vim.lsp.buf.signature_help, bufopts)
    -- vim.keymap.set('n', '<Leader>wa', vim.lsp.buf.add_workspace_folder, bufopts)
    -- vim.keymap.set('n', '<Leader>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
    -- vim.keymap.set('n', '<Leader>wl', function()
    --  print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    --  end, bufopts)
    vim.keymap.set('n', '<Leader>D', vim.lsp.buf.type_definition, bufopts)
    vim.keymap.set('n', '<Leader>rn', vim.lsp.buf.rename, bufopts)
    -- vim.keymap.set('n', '<Leader>ca', vim.lsp.buf.code_action, bufopts)
    -- vim.keymap.set('n', '<Leader>f', function() vim.lsp.buf.format { async = true } end, opts)
  end,
})
local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}
require('lspconfig')['rust_analyzer'].setup{
  on_attach = on_attach,
  flags = lsp_flags,
  -- Server-specific settings...
  settings = {
    ["rust-analyzer"] = {}
  }
}
require('lspconfig')['clangd'].setup{
  -- Server-specific settings...
  settings = {
    ["clangd"] = {}
  }
}
EOF
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
hook_add = '''
lua <<EOF
  -- Set up nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      completion = cmp.config.window.bordered(),
      documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- -- Set configuration for specific filetype.
  -- cmp.setup.filetype('gitcommit', {
  --   sources = cmp.config.sources({
  --     { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
  --   }, {
  --     { name = 'buffer' },
  --   })
  -- })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    enabled = function()
        return vim.fn.wordcount()['bytes'] < (1024*1024*10)
    end,
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    enabled = function()
        return vim.fn.wordcount()['bytes'] < (1024*1024*10)
    end,
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })
EOF
'''

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
hook_add = '''
lua << EOF
require'cmp'.setup {
  sources = {
    { name = 'nvim_lsp' }
  }
}

-- The nvim-cmp almost supports LSP's capabilities so You should advertise it to LSP servers..
local capabilities = require('cmp_nvim_lsp').default_capabilities()

-- The following example advertise capabilities to `clangd`.
require'lspconfig'.clangd.setup {
  capabilities = capabilities,
}
require'lspconfig'.rust_analyzer.setup {
  capabilities = capabilities,
}
EOF
'''
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_add = '''
lua << EOF
-- Jump forward or backward
vim.keymap.set({'i'}, '<Tab>', function() return vim.fn['vsnip#jumpable'](1) ~= 0 and '<Plug>(vsnip-jump-next)' or '<Tab>' end, { expr = true })
vim.keymap.set({'s'}, '<Tab>', function() return vim.fn['vsnip#jumpable'](1) ~= 0 and '<Plug>(vsnip-jump-next)' or '<Tab>' end, { expr = true })
vim.keymap.set({'i'}, '<S-Tab>', function() return vim.fn['vsnip#jumpable'](-1) ~= 0 and '<Plug>(vsnip-jump-prev)' or '<S-Tab>' end, { expr = true })
vim.keymap.set({'s'}, '<S-Tab>', function() return vim.fn['vsnip#jumpable'](-1) ~= 0 and '<Plug>(vsnip-jump-prev)' or '<S-Tab>' end, { expr = true })
EOF
'''

[[plugins]]
repo = 'hrsh7th/cmp-vsnip'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'

[[plugins]]
repo = 'hrsh7th/cmp-path'

[[plugins]]
repo = 'folke/tokyonight.nvim'
hook_add = '''
lua << EOF
require("tokyonight").setup({
  on_highlights = function(hl, c)
    hl.CursorLine = {
      bg = c.bg,
    }
    hl.TabLine = {
      fg = c.fg,
    }
    hl.LineNr = {
      bg = c.bg_highlight,
      fg = c.fg_dark,
    }
    hl.Pmenu = {
      bg = c.blue0,
    }
    hl.StatusLine = {
      bg = c.green1,
      fg = c.bg_dark,
    }
  end,
})
EOF
'''
